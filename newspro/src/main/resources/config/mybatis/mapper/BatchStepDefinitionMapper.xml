<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BatchStepDefinition">
	<resultMap type="org.mine.model.BatchStepDefinition" id="BaseResultMap">
		<result column="step_id" property="stepId"/>
		<result column="step_name" property="stepName"/>
		<result column="step_actuator" property="stepActuator"/>
		<result column="step_log_mdc_value" property="stepLogMdcValue"/>
		<result column="step_init_value" property="stepInitValue"/>
		<result column="create_date" property="createDate"/>
		<result column="valid_status" property="validStatus"/>
		<result column="remark" property="remark"/>
	</resultMap>

	<sql id="Base_Select_List">
		step_id,step_name,step_actuator,step_log_mdc_value,step_init_value,create_date,
		valid_status,remark
	</sql>

	<sql id="Base_Insert_Column">
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="stepId != null">step_id,</if>
			<if test="stepName != null">step_name,</if>
			<if test="stepActuator != null">step_actuator,</if>
			<if test="stepLogMdcValue != null">step_log_mdc_value,</if>
			<if test="stepInitValue != null">step_init_value,</if>
			<if test="createDate != null">create_date,</if>
			<if test="validStatus != null">valid_status,</if>
			<if test="remark != null">remark,</if>
		</trim>
	</sql>

	<sql id="Base_Insert_Values">
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="stepId != null">#{stepId},</if>
			<if test="stepName != null">#{stepName},</if>
			<if test="stepActuator != null">#{stepActuator},</if>
			<if test="stepLogMdcValue != null">#{stepLogMdcValue},</if>
			<if test="stepInitValue != null">#{stepInitValue},</if>
			<if test="createDate != null">#{createDate},</if>
			<if test="validStatus != null">#{validStatus},</if>
			<if test="remark != null">#{remark},</if>
		</trim>
	</sql>

	<insert id="insertOne" parameterType="org.mine.model.BatchStepDefinition">
		insert into batch_step_definition
		<include refid="BatchStepDefinition.Base_Insert_Column"/>
		values 
		<include refid="BatchStepDefinition.Base_Insert_Values"/>
	</insert>

	<insert id="batchInsert" parameterType="org.mine.model.BatchStepDefinition">
		insert into batch_step_definition
		<include refid="BatchStepDefinition.Base_Insert_Column"/>
		values 
		<include refid="BatchStepDefinition.Base_Insert_Values"/>
	</insert>

	<insert id="batchInsertXML" parameterType="java.util.List">
		insert into batch_step_definition
		(step_id,step_name,step_actuator,step_log_mdc_value,step_init_value
			,create_date,valid_status,remark)
		values
		<foreach collection="list" item="item" index="index" separator=",">
			(#{item.stepId},#{item.stepName},#{item.stepActuator},#{item.stepLogMdcValue},#{item.stepInitValue}
				,#{item.createDate},#{item.validStatus},#{item.remark})
		</foreach>
	</insert>
	<select id="selectOne1" parameterType="java.util.HashMap" resultMap="BaseResultMap">
		select
		<include refid="BatchStepDefinition.Base_Select_List"/>
		from batch_step_definition
		where step_id = #{stepId}
	</select>

	<select id="selectOne1R" parameterType="java.util.HashMap" resultMap="BaseResultMap">
		select
		<include refid="BatchStepDefinition.Base_Select_List"/>
		from batch_step_definition
		where step_id = #{stepId} and valid_status = '0'
	</select>

	<select id="selectOne1L" parameterType="java.util.HashMap" resultMap="BaseResultMap">
		select
		<include refid="BatchStepDefinition.Base_Select_List"/>
		from batch_step_definition
		where step_id = #{stepId} for update
	</select>

	<delete id="deleteOne1" parameterType="org.mine.model.BatchStepDefinition">
		delete from batch_step_definition
		where
		step_id = #{stepId}
	</delete>

	<delete id="deleteOne1L" parameterType="org.mine.model.BatchStepDefinition">
		delete from batch_step_definition
		where
		step_id = #{stepId} for update
	</delete>

	<update id="updateOne1" parameterType="org.mine.model.BatchStepDefinition">
		update batch_step_definition
		<trim prefix="set" suffixOverrides=",">
			<if test="stepName != null">step_name = #{stepName},</if>
			<if test="stepActuator != null">step_actuator = #{stepActuator},</if>
			<if test="stepLogMdcValue != null">step_log_mdc_value = #{stepLogMdcValue},</if>
			<if test="stepInitValue != null">step_init_value = #{stepInitValue},</if>
			<if test="createDate != null">create_date = #{createDate},</if>
			<if test="validStatus != null">valid_status = #{validStatus},</if>
			<if test="remark != null">remark = #{remark},</if>
		</trim>
		where step_id = #{stepId}
	</update>

	<update id="updateOne1R" parameterType="org.mine.model.BatchStepDefinition">
		update batch_step_definition
		<trim prefix="set" suffixOverrides=",">
			<if test="stepName != null">step_name = #{stepName},</if>
			<if test="stepActuator != null">step_actuator = #{stepActuator},</if>
			<if test="stepLogMdcValue != null">step_log_mdc_value = #{stepLogMdcValue},</if>
			<if test="stepInitValue != null">step_init_value = #{stepInitValue},</if>
			<if test="createDate != null">create_date = #{createDate},</if>
			<if test="validStatus != null">valid_status = #{validStatus},</if>
			<if test="remark != null">remark = #{remark},</if>
		</trim>
		where step_id = #{stepId} and valid_status = '0'
	</update>

	<update id="updateOne1L" parameterType="org.mine.model.BatchStepDefinition">
		update batch_step_definition
		<trim prefix="set" suffixOverrides=",">
			<if test="stepName != null">step_name = #{stepName},</if>
			<if test="stepActuator != null">step_actuator = #{stepActuator},</if>
			<if test="stepLogMdcValue != null">step_log_mdc_value = #{stepLogMdcValue},</if>
			<if test="stepInitValue != null">step_init_value = #{stepInitValue},</if>
			<if test="createDate != null">create_date = #{createDate},</if>
			<if test="validStatus != null">valid_status = #{validStatus},</if>
			<if test="remark != null">remark = #{remark},</if>
		</trim>
		where step_id = #{stepId} for update
	</update>

	<update id="batchUpdate1" parameterType="org.mine.model.BatchStepDefinition">
		update batch_step_definition
		<trim prefix="set" suffixOverrides=",">
			<if test="stepName != null">step_name = #{stepName},</if>
			<if test="stepActuator != null">step_actuator = #{stepActuator},</if>
			<if test="stepLogMdcValue != null">step_log_mdc_value = #{stepLogMdcValue},</if>
			<if test="stepInitValue != null">step_init_value = #{stepInitValue},</if>
			<if test="createDate != null">create_date = #{createDate},</if>
			<if test="validStatus != null">valid_status = #{validStatus},</if>
			<if test="remark != null">remark = #{remark},</if>
		</trim>
		where step_id = #{stepId}
	</update>

	<update id="batchUpdateXML" parameterType="java.util.List">
		update batch_step_definition set
		<trim prefix="step_name=case" suffix="end,">
			<foreach collection="list" item="item" index="index">
				<if test="item.stepName != null">
					when step_id = #{item.stepId} then #{item.stepName}
				</if>
			</foreach>
		</trim>
		<trim prefix="step_actuator=case" suffix="end,">
			<foreach collection="list" item="item" index="index">
				<if test="item.stepActuator != null">
					when step_id = #{item.stepId} then #{item.stepActuator}
				</if>
			</foreach>
		</trim>
		<trim prefix="step_log_mdc_value=case" suffix="end,">
			<foreach collection="list" item="item" index="index">
				<if test="item.stepLogMdcValue != null">
					when step_id = #{item.stepId} then #{item.stepLogMdcValue}
				</if>
			</foreach>
		</trim>
		<trim prefix="step_init_value=case" suffix="end,">
			<foreach collection="list" item="item" index="index">
				<if test="item.stepInitValue != null">
					when step_id = #{item.stepId} then #{item.stepInitValue}
				</if>
			</foreach>
		</trim>
		<trim prefix="create_date=case" suffix="end,">
			<foreach collection="list" item="item" index="index">
				<if test="item.createDate != null">
					when step_id = #{item.stepId} then #{item.createDate}
				</if>
			</foreach>
		</trim>
		<trim prefix="valid_status=case" suffix="end,">
			<foreach collection="list" item="item" index="index">
				<if test="item.validStatus != null">
					when step_id = #{item.stepId} then #{item.validStatus}
				</if>
			</foreach>
		</trim>
		<trim prefix="remark=case" suffix="end">
			<foreach collection="list" item="item" index="index">
				<if test="item.remark != null">
					when step_id = #{item.stepId} then #{item.remark}
				</if>
			</foreach>
		</trim>
		where
		step_id in
		<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
			#{item.stepId}
		</foreach>
	</update>
</mapper>